@require: base/option-ext
@require: base/inline
@require: base/list-ext
@require: base/string

@import: ../font-config

module Url : sig

  %% [embed-url url-string ctx] generates a inline-boxes of [url-string] with link to
  %% [url-string]. The generated inline-boxes allows line-feeding at any point in the content.
  val embed-url : string -> context -> inline-boxes

end = struct

  let link-to-uri-frame uri borderopt =
    let deco (x, y) w h d =
      let () = register-link-to-uri uri (x, y) w h d borderopt in []
    in
      (deco, deco, deco, deco)

  let href uri ib ctx =
    let ibL =
      match get-leftmost-script ib with
      | Some(scriptL) -> script-guard scriptL inline-nil
      | None          -> inline-nil
    in
    let ibR =
      match get-rightmost-script ib with
      | Some(scriptR) -> script-guard scriptR inline-nil
      | None          -> inline-nil
    in
    let ib-frame =
      inline-frame-breakable
        (0pt, 0pt, 0pt, 0pt)
        (link-to-uri-frame uri Option.none)
        ib
    in
    ibL ++ ib-frame ++ ibR

  let render-ib-url url-str ctx =
    url-str |> String.to-list
      |> List.map String.of-char
      |> List.map (fun str -> Inline.of-string str ctx)
      |> List.fold-right (fun ib acc -> (
          let sp = discretionary 200 inline-nil inline-nil inline-nil in
          Inline.concat [ib; sp; acc])) Inline.nil

  let embed-url url-str ctx =
    let url-ib = ctx |> set-font Latin FontConfig.font-latin-mono
      |> render-ib-url url-str in
    ctx |> href url-str url-ib

end
