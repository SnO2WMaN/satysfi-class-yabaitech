@require: annot
@require: base/inline
@require: base/block
@require: base/fn
@require: pervasives

@import: ../bibliography/repository
@import: ../bibliography/section
@import: ../document-config
@import: ../font-config
@import: ../lib/label
@import: ../mutables
@import: ../outline/location
@import: ../outline/repository
@import: ../table-of-contents/data
@import: ../table-of-contents/repository
@import: repository

module ChapterCommands : sig

  val render-chapter : string option -> bib-defs -> inline-text -> inline-text option -> inline-text option -> inline-text -> block-text -> context -> block-boxes
  val render-section : string option -> inline-text -> block-text -> context -> block-boxes
  val render-subsection : string option -> inline-text -> block-text -> context -> block-boxes
  val render-subsubsection : string option -> inline-text -> block-text -> context -> block-boxes

  val write-ref-chapter : string -> context -> inline-boxes
  val write-ref-section : string -> context -> inline-boxes
  val write-ref-subsection : string -> context -> inline-boxes

end = struct

  open DocumentConfig
  open FontConfig

  let no-pads = (0pt, 0pt, 0pt, 0pt)

  let section-heading ctx ib-heading =
    line-break true false (
      ctx
      |> set-paragraph-margin section-top-margin section-bottom-margin
    ) ib-heading

  let render-bib-section ctx-bib ctx-doc bibliography =
    match bibliography with
    | [] -> Block.nil
    | bibliography ->
      let ib-bib-title = ctx-doc
          |> make-chapter-title
          |> Inline.read { 参考文献 } in
      let bb-bib-title = (ib-bib-title ++ inline-fil)
        |> section-heading ctx-doc in
      let bb-bib-main = ctx-bib
        |> BibliographySection.render bibliography in
      bb-bib-title +++ bb-bib-main

  let render-chapter-title outline-label title ctx =
    let render-inline ctx =
      let ib =
        Inline.read title ctx |> OutlineLocation.register-current-location outline-label in
      let () = outline-label |> OutlineRepository.register-chapter (extract-string ib) in
      ib in
    ctx
    |> FontConfig.make-chapter-title
    |> Block.of-inline ?:true false false render-inline

  let render-chapter-subtitle subtitle ctx =
    let render-inline ctx =
      let ctx-subtitle = ctx |> make-chapter-subtitle in
      Inline.concat [
        ctx-subtitle |> Inline.read {― #subtitle; ―};
        Inline.fil;
      ] in
    ctx
    |> FontConfig.make-chapter-subtitle
    |> Block.of-inline false false render-inline

  let render-chapter-author author ctx =
    let render-inline ctx =
      Inline.concat [
        Inline.fil;
        ctx
        |> FontConfig.make-chapter-author
        |> Inline.read author
      ]
    in
    ctx
    |> make-chapter-author
    |> Block.of-inline false false render-inline

  let render-chapter-heading outline-label title subtitle-opt author ctx =
    let bb-title = ctx |> render-chapter-title outline-label title in
    let bb-subtitle = subtitle-opt
      |> Option.map (fun subtitle -> render-chapter-subtitle subtitle ctx)
      |> Option.unwrap-or Block.nil in
    let bb-author = ctx |> render-chapter-author author in
    Block.concat [
      Block.skip 18pt;
      bb-title;
      bb-subtitle;
      bb-author;
      Block.skip 18pt
    ]

  let render-chapter labelopt bibliography title title-for-toc subtitle author inner ctx =
    % Setup
    let label = Label.or-fresh labelopt in
    let () = ChapterRepository.reset-section-num () in
    let () = ChapterRepository.reset-subsection-num () in
    let _ = ChapterRepository.register-new-chapter label (ctx |> Inline.read title |> extract-string) in
    let title-for-toc = title-for-toc |> Option.unwrap-or title in
    let outline-label = OutlineLabel.of-chapter label in
    let () =
      TableOfContentsElement.make label outline-label title-for-toc subtitle author
      |> TableOfContentsRepository.register-element in
    let () = BibliographyRepository.register bibliography in
    % Render
    let ctx-doc =
      get-standard-context text-width
      |> set-font-size 12pt
      |> set-leading 18pt
      |> set-hyphen-penalty 1000 in
    let ib-pagehook = hook-page-break (fun pbinfo _ ->
      TableOfContentsRepository.register-page
        label
        (arabic pbinfo#page-number)) in
    let bb-title = ctx
      |> render-chapter-heading outline-label title subtitle author in
    let bb-content = read-block ctx inner in
    let bb-bib-section = render-bib-section ctx ctx-doc bibliography in
    Block.concat [
      line-break false false ctx ib-pagehook;
      bb-title;
      bb-content;
      bb-bib-section;
      clear-page
    ]

  let render-section-title outline-label section-num title ctx =
    let ctx-title = make-section-title ctx in
    let ib-num =
      read-inline ctx-title (embed-string (section-num ^ `.`))
      |> OutlineLocation.register-current-location outline-label in
    let ib-title = read-inline ctx-title title in
    let outline-text = section-num ^ `. `# ^ (extract-string ib-title) in
    let () = outline-label |> OutlineRepository.register-section outline-text in
    section-heading
      ctx
      (ib-num ++ (inline-skip 10pt) ++ ib-title ++ (inline-fil))

  let render-section label-opt title inner ctx =
    let () = ChapterRepository.reset-subsection-num () in
    let label = Label.or-fresh label-opt in
    let section-num =
      ChapterRepository.register-new-section label (ctx |> Inline.read title |> extract-string) in
    let outline-label = label |> OutlineLabel.of-section in
    let bb-title = render-section-title outline-label section-num title ctx in
    let bb-inner = read-block ctx inner in
    bb-title +++ bb-inner

  let render-subsection label-opt title inner ctx =
    let label = Label.or-fresh label-opt in
    let subsection-num = ChapterRepository.register-new-subsection label in
    let ctx-title = make-subsection-title ctx in
    let ib-num = read-inline ctx-title (embed-string (subsection-num ^ `.`)) in
    let ib-title = read-inline ctx-title title in
    let bb-title =
      line-break true false (ctx |> set-paragraph-margin section-top-margin section-bottom-margin)
      (ib-num ++ (inline-skip 10pt) ++ ib-title ++ (inline-fil)) in
    let bb-inner = read-block ctx inner in
    bb-title +++ bb-inner

  let render-subsubsection label-opt title inner ctx =
    let ib-title =
      let ctx-title = make-subsubsection-title ctx in
      read-inline ctx-title title in
    let bb-title = line-break true false ctx (ib-title ++ inline-fil) in
    let bb-main = read-block ctx inner in
    bb-title +++ bb-main

  let write-ref-chapter label ctx =
    let value = label
      |> ChapterRepository.get-chapter-num
      |> Option.unwrap-or `?`
      |> embed-string in
    ctx |> Inline.read { 第#value;章 }

  let write-ref-section label ctx =
    let value = label
      |> ChapterRepository.get-section-num
      |> Option.unwrap-or `?`
      |> embed-string in
    ctx |> Inline.read { #value;節 }

  let write-ref-subsection label ctx =
    let value = label
      |> ChapterRepository.get-subsection-num
      |> Option.unwrap-or `?`
      |> embed-string in
    ctx |> Inline.read { #value;節 }

end
