@require: footnote-scheme
@require: base/option-ext
@require: base/ref
@require: base/pager

@import: page/page-number
@import: page/footer
@import: page/header
@import: table-of-contents/page
@import: table-of-contents/repository
@import: title/page
@import: document-config
@import: font-config
@import: mutables

module Document : sig

    val compile : 'a -> block-text -> document
        constraint 'a :: (|
            title: string;
            volume: string;
            date: string;
            author: string;
            email: string;
            website: string;
            publisher: string;
        |)

end = struct

    let height-of-float-boxes pageno =
        (!Mutables.ref-float-boxes) |> List.fold-left (fun h (pn, bb) -> (
            if pn < pageno then h +' (get-natural-length bb) else h
        )) 0pt

    let make-bb-colophon-page record ctx =
        % TODO: Fix this
        Block.nil

    let get-content-area pbinfo =
        let () = FootnoteScheme.start-page () in
        let hgtfb = height-of-float-boxes pbinfo#page-number in
        let (text-origin-x, text-origin-y) = DocumentConfig.text-origin in
        (|
            text-origin = (text-origin-x, text-origin-y +' hgtfb);
            text-height = DocumentConfig.text-height -' hgtfb;
        |)

    let render-header-and-footer pbinfo =
        let pageno = pbinfo#page-number in
        (|
            header-origin  = DocumentConfig.header-origin;
            header-content = PageHeader.render-block pageno;
            footer-origin  = DocumentConfig.footer-origin;
            footer-content = PageFooter.render-block pageno;
        |)

    let render-front path ctx =
        let width = 188mm in
        let lower-left-corner = (-3mm, -3mm) in
        let img = load-pdf-image path 1 in
        let ib =
            inline-graphics 0pt 0pt 0pt (fun _ ->
            [ draw-text lower-left-corner
                (use-image-by-width img width) ]
            )
        in
        line-break false true ctx (ib ++ inline-fil)
            +++ clear-page

    let compile record inner =
        let ctx-doc =
            FontConfig.get-standard-context DocumentConfig.text-width
        in
        let front-page =
            ctx-doc |> render-front `front.pdf`
        in
        let bb-title-pages = ctx-doc |> TitlePage.render (|
                title = record#title;
                volume = record#volume;
                date  = record#date;
            |)
        in
        let bb-main-pages = read-block ctx-doc inner
        in
        let bb-toc-pages =
            let toc-list = TableOfContentsRepository.get-element-page-list () in
            ctx-doc
            |> TableOfContentsPage.render toc-list
        in
        let bb-colophon-pages = make-bb-colophon-page record ctx-doc
        in
        page-break DocumentConfig.paper-size get-content-area render-header-and-footer
            (Block.concat [
                front-page;
                bb-title-pages;
                bb-toc-pages;
                PageNumber.show-from-here;
                bb-main-pages;
                PageNumber.hide-from-here;
                bb-colophon-pages;
            ])

end
