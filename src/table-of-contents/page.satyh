@require: base/block
@require: base/inline
@require: base/int
@require: base/option-ext

@import: ../font-config
@import: ../chapter/commands
@import: data
@import: repository

module TableOfContentsPage : sig

  val render : ((TableOfContentsElement.t * string option) list) -> context -> block-boxes

end = struct

  %%% Heading
  let render-heading ctx =
    let write-heading ctx = ctx
      |> FontConfig.make-chapter-title
      |> Inline.read {目次} in
    ctx |> Block.of-inline false false write-heading

  %%% Content (List of table-of-contents)
  let-rec repeat-inline n ib =
    if n <= 0 then inline-nil else
      ib ++ (repeat-inline (n - 1) ib)

  let write-dots-line ctx w =
    let ib = read-inline ctx {.} ++ inline-skip 1pt in
    let wdot = get-natural-width ib in
    let n = round (w /' wdot) in
      inline-fil ++ (repeat-inline n ib)

  %% Title
  let make-chapter-title ctx = ctx
    |> set-font-size 10.5pt
    |> FontConfig.set-fontset FontConfig.gothic-medium

  let write-title element ctx =
    ctx
    |> make-chapter-title
    |> Inline.read (TableOfContentsElement.get-title element)

  %% Subtitle
  let make-subtitle ctx = ctx
    |> set-font-size 10.5pt
    |> FontConfig.set-fontset FontConfig.gothic-regular

  let write-subtitle element ctx =
    element
    |> TableOfContentsElement.get-subtitle-opt
    |> Option.map (fun st -> (
      Inline.concat [
        Inline.skip 10pt;
        ctx
        |> make-subtitle
        |> Inline.read {― #st; ―};
      ]))
    |> Option.unwrap-or inline-nil

  %% Author
  let make-author ctx = ctx
    |> set-font-size 9pt
    |> FontConfig.set-fontset FontConfig.gothic-medium

  let write-author element ctx =
    let author = TableOfContentsElement.get-author element in
    ctx
    |> make-author
    |> Inline.read author

  %% Page number
  let make-page ctx = ctx
    |> set-font-size 10.5pt
    |> FontConfig.set-fontset FontConfig.gothic-medium

  let write-page page-opt ctx =
    let page-str = page-opt
      |> Option.map (fun page-num ->
        (String.of-int (Int.of-string page-num - 2)))
      |> Option.unwrap-or `?` in
    ctx
    |> make-page
    |> Inline.of-string page-str

  let render-toc toc-element ctx =
    match toc-element with
      | (element, page-opt) ->
        let title = ctx |> write-title element in
        let subtitle = ctx |> write-subtitle element in
        let author = ctx |> write-author element in
        let page = ctx |> write-page page-opt in
        ctx
        |> set-paragraph-margin 0pt 24pt
        |> Block.of-inline true true (fun ctx -> Inline.concat [
            title;
            subtitle;
            Inline.skip 15pt;
            author;
            Inline.fil;
            page
          ])

  let render-toc-list toc-list ctx =
    toc-list
    |> List.fold-left (fun bbacc tocelem -> (
      let toc = ctx |> render-toc tocelem in
      Block.concat [
        bbacc;
        toc
      ])) Block.nil

  let render toc-list ctx =
    let heading = ctx |> render-heading in
    let main = ctx |> render-toc-list toc-list in
    Block.concat [
      heading;
      Block.skip 72pt;
      main;
      clear-page;
    ]

end
