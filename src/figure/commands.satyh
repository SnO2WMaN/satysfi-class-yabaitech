@require: base/inline
@require: base/block

@import: ../font-config
@import: ../lib/label
@import: ../mutables
@import: repository

module FigureCommands : sig

  val write-figure : string option -> inline-text -> block-text -> context -> inline-boxes
  val write-table : string option -> inline-text -> block-text -> context -> inline-boxes

  val write-ref-figure : string -> context -> inline-boxes
  val write-ref-table : string -> context -> inline-boxes

end = struct

  open FontConfig
  open Mutables

  let figure-scheme ctx labelopt prefix category caption inner =
    let it-num = labelopt
      |> Label.or-fresh
      |> FigureRepository.register
      |> embed-string in
    let ctx-category = ctx
      |> set-font Latin font-latin-sans
      |> set-cjk-font font-cjk-gothic in
    let ib-caption =
      Inline.concat [
        ctx-category |> Inline.read {#category; #it-num;};
        Inline.skip (get-font-size ctx);
        ctx |> Inline.read caption
      ] in
    let bb-inner =
      block-frame-breakable
        ctx
        (2pt, 2pt, 2pt, 2pt)
        (let d (_, _) _ _ _ = [] in (d, d, d, d))
        (fun ctx -> (
          (ctx |> Block.read inner)
          +++ (ctx |> Block.centering (Fn.const ib-caption))
        )) in
    hook-page-break (fun pbinfo _ -> (
      ref-float-boxes <- (pbinfo#page-number, bb-inner) :: !ref-float-boxes))

  let write-figure labelopt caption inner ctx =
    figure-scheme ctx labelopt `figure:` { 図 } caption inner

  let write-table labelopt caption inner ctx =
    figure-scheme ctx labelopt `table:` { 表 } caption inner

  let write-ref-figure label ctx =
    let num = label
      |> FigureRepository.get
      |> Option.unwrap-or `?`
      |> embed-string in
    ctx |> Inline.read { 図#num; }

  let write-ref-table label ctx =
    let num = label
      |> FigureRepository.get
      |> Option.unwrap-or `?`
      |> embed-string in
    ctx |> Inline.read { 表#num; }

end
